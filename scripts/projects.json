{
    "projects": [
      {
        "id": "0",
        "title": "Coming Soon!",
        "content": "<p class='body-text'>Projects are always being added so come back often to see what cool projects I've been working on!</p>",
        "next": "",
        "prev": "./template.html?project=1"
      },
      {
        "id": "1",
        "title": "AidEHD",
        "content": "<p>AID EHD</p><p class='body-text'>The idea for Aid EHD came from my wife. When I told her I wanted to create an app using the new Swift language I was learning she said, “it would be nice if I had an app that could remind me what I’m supposed to be doing so I don’t get so distracted.” I thought this was an interesting challenge, so I did the research, and this is what I came up with.</p><a href='https://github.com/erikrutledge/AidEHD'><img class='example-images' src='../media/1/appinterface.png'></a><p class='body-text'>I chose the name Aid EHD because the goal of the app is to help those who have ADHD brain and get distracted before they finish their tasks, like my wife. The app itself is very simple in design and just has a text field, 2 sliders and a button. The idea is that when the user knows they have a task that needs to get done they can open the app and type in what they need to do, for example “Get your homework done!” Then they move the first slider to reflect how long the task should take, maybe 2 hours. Then the last slider allows them to adjust how often they would like to be reminded. After all the information is input, they can press the “Start Focusing” button to schedule notifications every set amount of time for the course of their task.</p><a href='https://github.com/erikrutledge/AidEHD'><img class='example-images' src='../media/1/thumbnail.png'></a><p class='body-text'>I enjoyed writing this project especially because I could see this being used practically by a lot of people. It was also great to work in XCode on this project because of all the simulation tools it provides. I was able to create a simulation of the exact model phone I planned to run the app on and could see changes made in real time. This isn’t something new, but for someone who mainly works in Python or C++ it was really neat. Above is a screenshot of the development environment showing the simulation I just talked about, and below is an example of what the notifications would look like on your phone.</p><a href='https://github.com/erikrutledge/AidEHD'><img class='example-images' src='../media/1/notification.png'></a><p class='body-text'>The app is not currently on the Appstore, but I do plan on fixing some bugs, changing a few of the design elements, and doing a full release eventually. If you’re interested in seeing the source code you can click any of the images above that will direct you to the public GitHub repository.</p>",
        "next": "./template.html?project=0",
        "prev": "./template.html?project=2"
      },
      {
        "id": "2",
        "title": "Poke API Webtool",
        "content": "<p>PokeAPI Web Tool</p><p class='body-text'>This project was made to practice using APIs and dynamically update a website based on the user's input and randomly generated numbers. There were a few challenges I had to overcome for this project, but it’s one of my favorite because of the simplicity. The entire website is visible on arrival and just has a dropdown menu and a button. Click on this first image or right <a href='PokeAPI.html'>here</a> to try it out!</p><a href='PokeAPI.html'><img class='example-images' src='../media/2/pokeapi-home.png'></a><p class='body-text'>I was inspired to make this silly tool when I found pokeapi.co and started to brainstorm ways I could use it. It was my first attempt to draw information from these large data sets using JavaScript and I found it very enjoyable. I added the ability to select which generation of Pokemon the user wanted to draw from, but this hasn't been updated to the newest version quite yet.</p><a href='https://pokeapi.co/'><img class='example-images' src='../media/2/thumbnail.png'></a><p class='body-text'>I was very pleased with how the project turned out, especially with how concise I was able to make the logic in the JavaScript file. If you're at all interested in the project's source files, click <a href='https://github.com/erikrutledge/erikrutledge.github.io'>here</a> to see the public github repository.</p>",
        "next": "./template.html?project=1",
        "prev": "./template.html?project=3"
      },
      {
        "id": "3",
        "title": "Website Portfolio",
        "content": "<p>Website</p><p class='body-text'>I’m not sure if it’s clear when looking at this website, but every page, link, animation font, color, screenshot, and more were created by me using HTML, CSS, and JavaScript. Even the hosting of this website is through GitHub pages meaning no paid services or fancy external libraries were used at all, just vanilla web design. As someone who likes to learn everything I can when it comes to software development, I couldn’t bring myself to use a template because I wanted to know that I could do it myself.</p><a href='https://github.com/erikrutledge/erikrutledge.github.io'><img class='example-images' src='../media/3/homepage.png'></a><p class='body-text'>All of the pages and their elements were written in HTML, the styling was done in CSS, and all the page scripting was done in JavaScript. If you’re curious about any of these files, click on the image above to be directed to the GitHub repository where all the files used in this project are laid out.</p>",
        "next": "./template.html?project=2",
        "prev": "./template.html?project=4"
      },
      {
        "id": "4",
        "title": "Terminal Greed",
        "content": "<p>Terminal Greed</p><p class='body-text'>You may have noticed from my previous projects that I enjoy puns as names for the projects, and this one is no different. Terminal Greed is a 2-player game that runs in the console command line, also known as the terminal. The game is all about the temptation of taking money, but like the title warns, greed is a terminal illness, and it will kill you.</p><p class='body-text'>The game takes turns and alternates play between the 2 players. To begin, both players enter their names then they are shown a random amount of money placed into the center pool that they can try to steal. Starting with player 1 the game will ask if they want to steal the money or leave it. After locking in their decision the console is cleared so player 2 doesn’t see their answer before making their own decision with the same options. If one of the players choose to steal and the other passes, the player that stole walks away with the money. The catch is if both players try to steal neither of them get it and they are deducted money from their wallets equal to the money they tried to steal. If you ever run out of money you lose!</p><a href='https://github.com/erikrutledge/Cpp_Game'><img class='example-images' src='../media/4/decision.png'></a><a href='https://github.com/erikrutledge/Cpp_Game'><img class='example-images' src='../media/4/lose.png'></a><p class='body-text'>The most compelling part of this game is the mind tricks you can play on your opponent because the better you know them, the more money you can walk away with. The money isn’t pointless either because if you accumulate more than $100 you can spend it on an extra life. Play continues until, like Monopoly, one person is rich and the other is left with nothing.</p><a href='https://github.com/erikrutledge/Cpp_Game'><img class='example-images' src='../media/4/life.png'></a><a href='https://github.com/erikrutledge/Cpp_Game'><img class='example-images' src='../media/4/summary.png'></a><p class='body-text'>Even though terminal, or command line, games are pretty outdated and are limited in their capabilities, I really enjoyed thinking creatively to balance a fun game that focuses less on the technology and more on the human interaction. As you can see in these media the game itself is just text but is very enjoyable to play.</p><a href='https://github.com/erikrutledge/Cpp_Game'><img class='example-images' src='../media/4/results.png'></a><p class='body-text'>By clicking any of the images on this page you can be directed to the public GitHub repository to check out the source code for yourself.</p>",
        "next": "./template.html?project=3",
        "prev": "./template.html?project=5"
      },
      {
        "id": "5",
        "title": "Pokulation",
        "content": "<p>Pokulation</p><p class='body-text'>Pokulation is a Pokemon Simulation game written in Python using the Python Arcade library. I had this idea for a game when I saw a project someone else made for a rock, paper, scissors simulation. Their project was just a button that created a random amount of rock/paper/scissor objects that moved randomly around the screen bouncing off each other. When the objects collided, the losing object would transform into the object that defeated it, and this would happen until all the items were the same at which point the simulation would end.</p><a href='https://github.com/erikrutledge/Pokulation-Game'><img class='example-images' src='../media/5/startscreen.png'></a><p class='body-text'>I wanted to expand the concept of this collision simulation idea, but with more collisions, more complex interactions, and input from the player to make it more of a game than a passive experience. That’s when I got the idea to use Pokemon types as the collision criteria, for example water type is super-effective against fire so that collision would result in the deletion of the fire type object. This type-logic includes all 18 different Pokemon types and every possible collision combination.</p><p class='body-text'>Another major difference I included in my game that wasn’t present in the rock paper scissors version was additional user interaction. To do this I created a play field with a menu bar across the bottom of the screen. When you enter the level, nothing will happen because the game is waiting for the user to place the objects into the play area. I gave the player the ability to drag and drop objects from the menu bar into the playing field. After dropping an object, the player can click around the window, which points an arrow, to tell the piece which direction to apply the impulse force. After the pieces are placed and directions are given, the player can press “Start!” to begin the simulation and all the pieces start along their given trajectory simultaneously.</p><a href='https://github.com/erikrutledge/Pokulation-Game'><img class='example-images' src='../media/5/playedgame.png'></a><p class='body-text'>The current state of the project has all the functional elements created and enough spaces to create 12 levels. There are some improvements that I would like to make, but I won’t go into that here. If you’re interested in the technical development, click the image above to access the public GitHub repository.</p>",
        "next": "./template.html?project=4",
        "prev": "./template.html?project=6"
      },
      {
        "id": "6",
        "title": "Mockter Dario",
        "content": "<p>Mock-ter Dario</p><iframe class='example-videos' height='400' width='500' src='https://www.youtube.com/embed/tGYcOiZuvmo' frameborder='0' allowfullscreen></iframe><p class='body-text'>This project is a fully functional clone of the NES Dr Mario game made in Python using the Pygame library. I started this project thinking it wouldn't be too difficult to adapt a tetris project I had made in the past, but I quickly learned that this was a much more interesting challenge. If you'd like to see the game running, watch the video above for a commentated walkthrough of the project!</p><a href='https://github.com/erikrutledge/drmario'><img class='example-images' src='../media/6/box-art.png'></a><p class='body-text'>If you're interested in downloading the game to play for yourself or just want to see the source code, click the image above to be redirected to my GitHub repository.</p>",
        "next": "./template.html?project=5",
        "prev": ""
      }
    ]
  }